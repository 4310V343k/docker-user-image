name: build_debian

on:
  push:
    branches:
      - 'master'
    paths:
      - 'user-entrypoint.sh'
      - 'Dockerfile.debian'
      - '.github/workflows/build_debian.yml'
  pull_request:
    branches:
      - 'master'
    paths:
      - 'user-entrypoint.sh'
      - 'Dockerfile.debian'
      - '.github/workflows/build_debian.yml'
  repository_dispatch:
    types: [debian_image_update]

jobs:
  docker:
    runs-on: ubuntu-latest
    env:
      TITLE: User Debian
    strategy:
      matrix:
        include:
          -
            base-image: debian:8-slim
            tags: |
              ghcr.io/phasecorex/user-debian:8-slim
              ghcr.io/phasecorex/user-debian:jessie-slim
            platforms: |
              linux/amd64
              linux/arm/v5
              linux/arm/v6
              linux/arm/v7
              linux/386
          -
            base-image: debian:8
            tags: |
              ghcr.io/phasecorex/user-debian:8
              ghcr.io/phasecorex/user-debian:jessie
            platforms: |
              linux/amd64
              linux/arm/v5
              linux/arm/v6
              linux/arm/v7
              linux/386
          -
            base-image: debian:9-slim
            tags: |
              ghcr.io/phasecorex/user-debian:9-slim
              ghcr.io/phasecorex/user-debian:stretch-slim
            platforms: |
              linux/amd64
              linux/arm/v5
              linux/arm/v6
              linux/arm/v7
              linux/arm64
              linux/386
          -
            base-image: debian:9
            tags: |
              ghcr.io/phasecorex/user-debian:9
              ghcr.io/phasecorex/user-debian:stretch
            platforms: |
              linux/amd64
              linux/arm/v5
              linux/arm/v6
              linux/arm/v7
              linux/arm64
              linux/386
          -
            base-image: debian:10-slim
            tags: |
              ghcr.io/phasecorex/user-debian:10-slim
              ghcr.io/phasecorex/user-debian:buster-slim
            platforms: |
              linux/amd64
              linux/arm/v5
              linux/arm/v6
              linux/arm/v7
              linux/arm64
              linux/386
          -
            base-image: debian:10
            tags: |
              ghcr.io/phasecorex/user-debian:latest
              ghcr.io/phasecorex/user-debian:10
              ghcr.io/phasecorex/user-debian:buster
            platforms: |
              linux/amd64
              linux/arm/v5
              linux/arm/v6
              linux/arm/v7
              linux/arm64
              linux/386
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Repo metadata
        id: repo
        uses: actions/github-script@v3
        with:
          script: |
            const repo = await github.repos.get(context.repo)
            return repo.data
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1 
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_TOKEN }}
      -
        name: Build and push ${{ matrix.base-image }}
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile.debian
          platforms: ${{ matrix.platforms }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ matrix.tags }}
          build-args: |
            BASE_IMG=${{ matrix.base-image }}
          cache-from: |
            ${{ matrix.tags }}
          labels: |
            maintainer=${{ github.repository_owner }}
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            org.opencontainers.image.title=${{ env.TITLE }}
            org.opencontainers.image.description=${{ fromJson(steps.repo.outputs.result).description }}
            org.opencontainers.image.source=${{ fromJson(steps.repo.outputs.result).html_url }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=${{ fromJson(steps.repo.outputs.result).license.spdx_id }}
