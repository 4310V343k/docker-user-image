name: build_debian

on:
  push:
    branches:
      - 'master'
    paths-ignore:
      - '**.md'
  pull_request:
    branches:
      - 'master'
    paths-ignore:
      - '**.md'
  repository_dispatch:
    types: [debian_image_update]

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Repo metadata
        id: repo
        uses: actions/github-script@v3
        with:
          script: |
            const repo = await github.repos.get(context.repo)
            return repo.data
      -
        name: Prepare
        id: prep
        run: |
          DOCKER_IMAGE=phasecorex/user-debian
          echo ::set-output name=docker_image::${DOCKER_IMAGE}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Build and push stretch
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile.debian
          platforms: linux/amd64,linux/arm/v5,linux/arm/v6,linux/arm/v7,linux/arm64
          push: false
          tags: ${{ steps.prep.outputs.docker_image }}:stretch,ghcr.io/${{ steps.prep.outputs.docker_image }}:stretch
          cache-from: |
            ${{ steps.prep.outputs.docker_image }}:stretch
          labels: |
            maintainer=Ryan Foster <phasecorex@gmail.com>
            org.opencontainers.image.title=${{ fromJson(steps.repo.outputs.result).name }}
            org.opencontainers.image.description=${{ fromJson(steps.repo.outputs.result).description }}
            org.opencontainers.image.url=${{ fromJson(steps.repo.outputs.result).html_url }}
            org.opencontainers.image.source=${{ fromJson(steps.repo.outputs.result).clone_url }}
            org.opencontainers.image.version=stretch
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=${{ fromJson(steps.repo.outputs.result).license.spdx_id }}
