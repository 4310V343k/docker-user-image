name: build_debian

on:
  push:
    branches:
      - 'master'
    paths-ignore:
      - '**.md'
  pull_request:
    branches:
      - 'master'
    paths-ignore:
      - '**.md'
  repository_dispatch:
    types: [debian_image_update]

jobs:
  docker:
    runs-on: ubuntu-latest
    env:
      DOCKERHUB_SLUG: phasecorex/user-debian
      GHCR_SLUG: ghcr.io/phasecorex/user-debian
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Repo metadata
        id: repo
        uses: actions/github-script@v3
        with:
          script: |
            const repo = await github.repos.get(context.repo)
            return repo.data
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1 
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_TOKEN }}
      -
        name: Build and push stretch
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm/v5,linux/arm/v6,linux/arm/v7,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.GHCR_SLUG }}:stretch
          build-args: |
            BASE_IMG=debian:stretch
          cache-from: |
            ${{ env.GHCR_SLUG }}:stretch
          labels: |
            maintainer=Ryan Foster <phasecorex@gmail.com>
            org.opencontainers.image.title=${{ fromJson(steps.repo.outputs.result).name }}
            org.opencontainers.image.description=${{ fromJson(steps.repo.outputs.result).description }}
            org.opencontainers.image.url=${{ fromJson(steps.repo.outputs.result).html_url }}
            org.opencontainers.image.source=${{ fromJson(steps.repo.outputs.result).clone_url }}
            org.opencontainers.image.version=stretch
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=${{ fromJson(steps.repo.outputs.result).license.spdx_id }}
